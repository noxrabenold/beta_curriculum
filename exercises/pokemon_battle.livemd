# Pokemon Battle

## Navigation

[Return Home](../start.livemd)

## Overview

You're going to create a pokemon battle game. If you're not familiar with pokemon, it's a game where
elemental creatures battle.

In this game, you're going to create a few pokemon, `charmander`, `squirtle`, and `bulbasaur`
then have them battle.

Some Elixir cells in this exercise will rely on previous solutions, so ensure that you
use the `ea` command to evaluate all cells. Otherwise, your prior code may be stale and result in bugs.

### Create a Pokemon Struct

In the Elixir cell below, create a `Pokemon` Struct with the keys `:name`, `:type`, `health`, `:attack`, and `:speed`.

* `:name` will be a string.
* `:type` will be an atom of either `:grass`, `:water`, or `:fire`
* `:health` will be an integer with a default value of `20`
* `:attack` will be an integer with a default value of `5`
* `:speed` will be an integer

```elixir
defmodule Pokemon do
  defstruct [:name, :type, :health, :attack, :speed]
end
```

### Create 3 Pokemon

In the Elixir cell below, create 3 variables `charmander`, `bulbasaur`, and `squirtle`.
bind each variable to a `Pokemon` struct with the following stats.

```mermaid
classDiagram
    class Charmander {
        type: :fire
        speed: 20
    }
    class Bulbasaur {
        type: :grass
        speed: 15
    }
    class Squirtle {
        type: :water
        speed: 10
    }
```

Replace `nil` with your solution.

```elixir
charmander = %Pokemon{name: "Charmander", type: "Fire", speed: 20}

bulbasaur = %Pokemon{name: "Bulbasaur", type: "Grass", speed: 15}

squirtle = %Pokemon{name: "Squirtle", type: "Water", speed: 10}
```

### Create an attack/2 function

In the Elixir cell below, create an `attack/2` function which:

* accept two pokemon structs as parameters
* return an updated version of the second pokemon struct.
* subtract the first pokemon's attack from the second pokemon's health.
* double the damage dealt if the pokemon has a type advantage.
* half the damage dealt if the pokemon has a type weakness.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
    C["Charmander (5 attack)"]
    B["Bulbasaur (20 health)"]
    b["Bulbasaur (10 health)"]
    
    C --> attack
    B --> attack
    attack --> b
```

<!-- livebook:{"break_markdown":true} -->

Use the following type advantages to determine half or double damage.

* `:fire` beats `:grass`
* `:grass` beats `:water`
* `:water` beats `:fire`

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
    f1[Fire]
    w1[Water]
    g1[Grass]
    f2[Fire]
    w2[Water]
    g2[Grass]

    f1 --weak--> w1 --weak--> g1 --weak--> f1
    f2 --strong--> g2 --strong--> w2 --strong--> f2
```

```elixir
attack = fn (x,y) ->
  
```

### Pokemon Battle

In the Elixir cell below, create a `battle/2` function which:

* Accept two pokemon structs as parameters.
* `attack/2` with the pokemon that has the higher speed.
* if the attacked pokemon is still above 0 health, attack with the second pokemon.
* return two updated pokemon structs in a tuple.

```mermaid
flowchart
    C["Charmander (5 attack, 20 health)"]
    B["Bulbasaur (5 attack, 20 health)"]

    C --> battle
    B --> battle
    battle --> b["{Bulbasaur (10 health), Charmander (17.5 health)}"]
```

```elixir

```

### Pokemon Simulator

In the Elixir cell below, bring all of the prior functionality into a single
`Pokemon` module.

* Define a `Pokemon` struct the same as before.
* add the named functions `attack/2` and `battle/2`.
* set `@charmander`, `@bulbasaur`, and `@squirtle` as module attributes.
* create a `simulate/2` function that takes in two pokemon names as strings `"Bulbasaur"`, `"Squirtle"`, or `"Charmander"`.
* make the pokemon `battle/2` each other three times. Ensure that you use the updated pokemon structs in the next battle.
* if both pokemon still have health, return `"it's a draw"`
* if one pokemon has less than 1 health, return `"#{pokemon.name} wins!"`

```elixir

```
